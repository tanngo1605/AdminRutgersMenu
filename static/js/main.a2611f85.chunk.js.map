{"version":3,"sources":["components/tables/modalDelete.js","redux/user/userActionTypes.js","components/tables/tables.js","redux/user/userAction.js","components/signin/signin.js","containers/App.js","serviceWorker.js","redux/user/userReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["DeleteModal","props","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","variant","onClick","onHide","onConfirm","userActionTypes","LOGIN","LOGOUT","useStyles","makeStyles","theme","button","margin","spacing","connect","state","currentUser","user","dispatch","logout","type","token","classes","useState","columns","title","field","lookup","busch","livingston","collegeAve","cookdouglas","setState","shouldFetch","setShouldFetch","modalDeleteShow","setModalDeleteShow","useEffect","a","axios","get","result","data","console","log","fetchData","length","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","post","headers","authorization","then","respone","catch","e","onRowUpdate","oldData","indexOf","_id","patch","onRowDelete","splice","delete","Button","color","className","startIcon","preventDefault","show","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","root","height","image","backgroundImage","backgroundRepeat","backgroundColor","grey","backgroundSize","backgroundPosition","paper","display","flexDirection","alignItems","avatar","form","width","marginTop","submit","colorRed","login","userInformation","payload","email","setEmail","password","setPassword","Grid","container","component","CssBaseline","item","xs","sm","md","Paper","elevation","square","Avatar","Typography","noValidate","onSubmit","res","alert","TextField","required","fullWidth","label","name","autoComplete","autoFocus","onChange","target","value","FormControlLabel","control","Checkbox","Link","href","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","middlewares","logger","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a2611f85.chunk.js","sourcesContent":["import React from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\n//import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction DeleteModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Confirm Delete\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you sure?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={props.onHide}>No</Button>\r\n          <Button variant=\"secondary\" onClick={props.onConfirm}>Yes</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default DeleteModal;","const userActionTypes = {\r\n    LOGIN: \"LOGIN\",\r\n    LOGOUT: \"LOGOUT\"\r\n};\r\n\r\nexport default userActionTypes;","import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport DeleteModal from \"./modalDelete\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/user/userAction\"\r\n/*\r\nchange the state into 2 state\r\nfetch data from server\r\nreturn {...preState, data}\r\n*/\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst MaterialTableDemo = (props) => {\r\n  const { currentUser, logout } = props;\r\n  const token = currentUser.token;\r\n\r\n  const classes = useStyles();\r\n\r\n  const [columns, setCol] = useState({\r\n    columns: [\r\n      { title: \"Name\", field: \"name\" },\r\n      { title: \"Information\", field: \"info\" },\r\n      { title: \"Image\", field: \"img\", type: \"string\" },\r\n      {\r\n        title: \"Campus\",\r\n        field: \"campus\",\r\n        lookup: {\r\n          busch: \"Busch\",\r\n          livingston: \"Livingston\",\r\n          collegeAve: \"College Avenue\",\r\n          cookdouglas: \"Cook/Douglas\",\r\n        },\r\n      },\r\n    ],\r\n  });\r\n\r\n  const [state, setState] = useState([]);\r\n  const [shouldFetch, setShouldFetch] = useState(true);\r\n  const [modalDeleteShow, setModalDeleteShow] = useState(false);\r\n\r\n  // fetch data from server Heroku\r\n\r\n  useEffect(() => {\r\n    // console.log(\"I am usee effect\") // Test use effect\r\n    const fetchData = async () => {\r\n      //let result = await axios.get('http://localhost:5000/food');\r\n      try {\r\n        let result = await axios.get(\r\n          \"https://menurutgersbackend.herokuapp.com/food\"\r\n        );\r\n        setState(result.data.data);\r\n        console.log(result);\r\n        //setShouldFetch(false)\r\n      } catch (e) {\r\n        if (e) console.log(e);\r\n      }\r\n    };\r\n    if (shouldFetch) {\r\n      fetchData();\r\n      setShouldFetch(false);\r\n    } else {\r\n      console.log(shouldFetch);\r\n    }\r\n  }, [state.length]);\r\n\r\n  // console.log(\"render...\");   // test whether the web renders or not\r\n\r\n  // Edit data from server\r\n  // CODE GOES HERE: (just for fun)\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Rutgers Menu\"\r\n        columns={columns.columns}\r\n        data={state}\r\n        editable={{\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState];\r\n                  console.log(newData);\r\n                  data.push(newData);\r\n                  console.log(state);\r\n                  axios\r\n                    .post(\r\n                      \"https://menurutgersbackend.herokuapp.com/food\",\r\n                      newData,\r\n                      { headers: { authorization: token } }\r\n                    )\r\n                    .then((respone) => console.log(respone))\r\n                    .catch((e) => console.log(e)); // update data on server\r\n                  return data;\r\n                });\r\n              }, 600);\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                if (oldData) {\r\n                  setState((prevState) => {\r\n                    const data = [...prevState];\r\n                    data[data.indexOf(oldData)] = newData;\r\n                    const id = oldData._id;\r\n                    // console.log(state);\r\n                    // console.log(oldData._id);\r\n                    // console.log(newData._id);\r\n                    axios\r\n                      .patch(\r\n                        \"https://menurutgersbackend.herokuapp.com/food/\" + id,\r\n                        newData,\r\n                        { headers: { authorization: token } }\r\n                      )\r\n                      .then((respone) => console.log(respone))\r\n                      .catch((e) => console.log(e)); // update data on server\r\n\r\n                    return data;\r\n                  });\r\n                }\r\n              }, 600);\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState];\r\n                  data.splice(data.indexOf(oldData), 1);\r\n                  const id = oldData._id;\r\n                  console.log(state);\r\n                  axios\r\n                    .delete(\r\n                      \"https://menurutgersbackend.herokuapp.com/food/\" + id,\r\n                      { headers: { authorization: token } }\r\n                    )\r\n                    .then((respone) => console.log(respone))\r\n                    .catch((e) => console.log(e)); // update data on server\r\n\r\n                  return data;\r\n                });\r\n              }, 600);\r\n            }),\r\n        }}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        className={classes.button}\r\n        startIcon={<SaveIcon />}\r\n        onClick={(e) => {\r\n         setTimeout(() =>{logout()},1000);\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        Log Out\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        size=\"large\"\r\n        className={classes.button}\r\n        startIcon={<DeleteIcon />}\r\n        onClick={() => setModalDeleteShow(true)}\r\n      >\r\n        Delete All\r\n      </Button>\r\n      <DeleteModal\r\n        show={modalDeleteShow}\r\n        onHide={() => setModalDeleteShow(false)}\r\n        onConfirm={() => {\r\n          setState([]);\r\n          setModalDeleteShow(false);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser: state.user.currentUser\r\n})\r\n\r\nconst mapDispatchToProps =  dispatch => ({\r\n  logout: () => dispatch(logout())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (MaterialTableDemo);","import userActionTypes from \"./userActionTypes\";\r\n\r\nexport const login = (userInformation) => ({\r\n  type: userActionTypes.LOGIN,\r\n  payload: userInformation,\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: userActionTypes.LOGOUT,\r\n});\r\n","import React, { useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { login } from \"../../redux/user/userAction\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: \"#757ce8\",\r\n      main: \"##e53935\",\r\n      dark: \"#002884\",\r\n      contrastText: \"#fff\",\r\n    },\r\n    secondary: {\r\n      light: \"#ff7961\",\r\n      main: \"#e53935\",\r\n      dark: \"#ba000d\",\r\n      contrastText: \"#000\",\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    backgroundImage:\r\n      \"url(https://bestdelegate.com/wp-content/uploads/2013/12/Rutgers-Campus.jpg)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  colorRed: {\r\n    color: theme.palette.secondary.main,\r\n  },\r\n}));\r\n\r\nconst SignIn = (props) => {\r\n  const classes = useStyles();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const { login } = props;\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const data = {\r\n      email: email,\r\n      password: password,\r\n    };\r\n\r\n    axios\r\n      .post(\"https://menurutgersbackend.herokuapp.com/user/login\", data)\r\n      .then((res) => login(res.data))\r\n      .catch((e) => {\r\n        console.log(e);\r\n        alert(\"Wrong email or password\");\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n      });\r\n  };\r\n  const handleEmailChange = (e) => {\r\n    setEmail(e.target.value);\r\n  };\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <form className={classes.form} noValidate={false} onSubmit={onSubmit}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              // className={classes.colorRed}\r\n              color=\"secondary\"\r\n              onChange={handleEmailChange}\r\n              value={email}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              // className={classes.colorRed}\r\n              color=\"secondary\"\r\n              onChange={handlePasswordChange}\r\n              value={password}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              className={classes.submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\" className={classes.colorRed}>\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  login: (userInformation) => dispatch(login(userInformation))\r\n})\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n// import SignInPage from \"../pages/SignInPage\";\r\n// import ManagerPage from \"../pages/ManagerPage\";\r\n// import { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Table from \"../components/tables/tables\";\r\nimport SignIn from \"../components/signin/signin\";\r\nimport {connect} from \"react-redux\"\r\n\r\nfunction App(props) {\r\n  let {currentUser} = props;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {currentUser ?<Table />:<SignIn /> }\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser: state.user.currentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import userActionTypes from \"./userActionTypes\";\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null\r\n};\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case userActionTypes.LOGIN:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload\r\n      };\r\n\r\n    case userActionTypes.LOGOUT:\r\n      return {\r\n        ...state,\r\n        currentUser: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport userReducer from \"./user/userReducer\";\r\n\r\nimport {persistReducer} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage,\r\n    whitelist: [\"user\"]\r\n}\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer\r\n})\r\n\r\n\r\nexport default persistReducer(persistConfig, rootReducer)","import {createStore, applyMiddleware} from 'redux';\r\nimport {persistStore} from \"redux-persist\"\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst middlewares = [logger];//more things will be added\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\nexport const persistor = persistStore(store)\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store, persistor } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <React.StrictMode>\r\n        <PersistGate persistor={persistor}>\r\n          <App />\r\n        </PersistGate>\r\n      </React.StrictMode>\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}